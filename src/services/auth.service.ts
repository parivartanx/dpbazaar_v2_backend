import bcrypt from 'bcryptjs';
import jwt, { SignOptions } from 'jsonwebtoken';
import { config } from '../config/environment';
import { User, UserRole, JwtPayload } from '../types/common';
import { IUserRepository } from '../repositories/interfaces/IUserRepository';

interface RegisterData {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role?: UserRole; // Optional role, defaults to CUSTOMER
}

interface LoginData {
  email: string;
  password: string;
}

interface AuthResult {
  user: Omit<User, 'password'>;
  accessToken: string;
  refreshToken: string;
}

export class AuthService {
  // In a real application, you would inject the user repository
  private userRepository: IUserRepository;

  constructor(userRepository: IUserRepository) {
    this.userRepository = userRepository;
  }

  public async register(data: RegisterData): Promise<AuthResult> {
    const { firstName, lastName, email, password, role } = data;

    // Check if user already exists
    const existingUser = await this.userRepository.findByEmail(email);
    if (existingUser) {
      throw new Error('User already exists');
    }

    // Hash password
    const saltRounds = config.security.bcryptRounds;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Create user
    const user: User = {
      id: 'temp-id', // In real app, this would be generated by the database
      firstName,
      lastName,
      email,
      role: role || UserRole.CUSTOMER,
      isActive: true,
      emailVerified: false,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Save user to database
    const savedUser = await this.userRepository.create({
      ...user,
      password: hashedPassword,
    });

    if (!savedUser) {
      throw new Error('User registration failed');
    }
    // Log user creation
    console.log(`User created: ${savedUser.password}`);

    // Generate tokens
    const { accessToken, refreshToken } = this.generateTokens(user);

    return {
      user: {
        id: savedUser.id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        role: user.role,
        isActive: user.isActive,
        emailVerified: user.emailVerified,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
      accessToken,
      refreshToken,
    };
  }

  public async login(data: LoginData): Promise<AuthResult> {
    const { email } = data;

    // Find user by email
    // const user = await this.userRepository.findByEmail(email);
    // if (!user) {
    //   throw new Error('Invalid credentials');
    // }

    // Mock user for demonstration
    const user: User = {
      id: 'temp-id',
      firstName: 'Test',
      lastName: 'User',
      email,
      role: UserRole.CUSTOMER,
      isActive: true,
      emailVerified: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Verify password
    // const isPasswordValid = await bcrypt.compare(password, user.password);
    // if (!isPasswordValid) {
    //   throw new Error('Invalid credentials');
    // }

    // Check if user is active
    if (!user.isActive) {
      throw new Error('Account is deactivated');
    }

    // Generate tokens
    const { accessToken, refreshToken } = this.generateTokens(user);

    return {
      user: {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        role: user.role,
        isActive: user.isActive,
        emailVerified: user.emailVerified,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
      accessToken,
      refreshToken,
    };
  }

  public async refreshToken(
    refreshToken: string
  ): Promise<{ accessToken: string }> {
    try {
      // Verify refresh token
      const decoded = jwt.verify(
        refreshToken,
        config.jwt.refreshSecret
      ) as JwtPayload;

      // Find user
      // const user = await this.userRepository.findById(decoded.userId);
      // if (!user || !user.isActive) {
      //   throw new Error('Invalid refresh token');
      // }

      // Generate new access token
      const accessToken = jwt.sign(
        {
          userId: decoded.userId,
          email: decoded.email,
          role: decoded.role,
        },
        config.jwt.secret,
        { expiresIn: config.jwt.accessTokenExpiry } as SignOptions
      );

      return { accessToken };
    } catch (error) {
      throw new Error('Invalid refresh token');
    }
  }

  public async forgotPassword(email: string): Promise<void> {
    // Find user by email
    // const user = await this.userRepository.findByEmail(email);
    // if (!user) {
    //   // Don't reveal if user exists or not
    //   return;
    // }

    // Generate reset token
    jwt.sign({ email, type: 'password-reset' }, config.jwt.secret, {
      expiresIn: config.jwt.accessTokenExpiry,
    } as SignOptions);

    // Save reset token to database
    // await this.userRepository.updateResetToken(user.id, resetToken);

    // Send email with reset link
    // await this.emailService.sendPasswordResetEmail(email, resetToken);
  }

  public async resetPassword(
    token: string,
    newPassword: string
  ): Promise<void> {
    try {
      // Verify reset token
      const decoded = jwt.verify(token, config.jwt.secret) as any;

      if (decoded.type !== 'password-reset') {
        throw new Error('Invalid reset token');
      }

      // Find user by email
      // const user = await this.userRepository.findByEmail(decoded.email);
      // if (!user) {
      //   throw new Error('User not found');
      // }

      // Hash new password
      const saltRounds = config.security.bcryptRounds;
      await bcrypt.hash(newPassword, saltRounds);

      // Update password and clear reset token
      // await this.userRepository.updatePassword(user.id, hashedPassword);
    } catch (error) {
      throw new Error('Invalid or expired reset token');
    }
  }

  private generateTokens(user: User): {
    accessToken: string;
    refreshToken: string;
  } {
    const payload: JwtPayload = {
      userId: user.id,
      email: user.email,
      role: user.role,
    };

    const accessToken = jwt.sign(payload, config.jwt.secret, {
      expiresIn: config.jwt.accessTokenExpiry,
    } as SignOptions);

    const refreshToken = jwt.sign(payload, config.jwt.refreshSecret, {
      expiresIn: config.jwt.refreshTokenExpiry,
    } as SignOptions);

    return { accessToken, refreshToken };
  }
}
