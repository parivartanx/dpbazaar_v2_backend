import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { config } from '../config/environment';
import { User, UserRole, JwtPayload } from '../types/common';

interface RegisterData {
  name: string;
  email: string;
  password: string;
}

interface LoginData {
  email: string;
  password: string;
}

interface AuthResult {
  user: Omit<User, 'password'>;
  accessToken: string;
  refreshToken: string;
}

export class AuthService {
  // In a real application, you would inject the user repository
  // private userRepository: IUserRepository;

  public async register(data: RegisterData): Promise<AuthResult> {
    const { name, email, password } = data;

    // Check if user already exists
    // const existingUser = await this.userRepository.findByEmail(email);
    // if (existingUser) {
    //   throw new Error('User already exists');
    // }

    // Hash password
    const saltRounds = config.BCRYPT_ROUNDS;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Create user
    const user: User = {
      id: 'temp-id', // In real app, this would be generated by the database
      name,
      email,
      role: UserRole.USER,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Save user to database
    // const savedUser = await this.userRepository.create({
    //   ...user,
    //   password: hashedPassword
    // });

    // Generate tokens
    const { accessToken, refreshToken } = this.generateTokens(user);

    return {
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        isActive: user.isActive,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
      accessToken,
      refreshToken,
    };
  }

  public async login(data: LoginData): Promise<AuthResult> {
    const { email, password } = data;

    // Find user by email
    // const user = await this.userRepository.findByEmail(email);
    // if (!user) {
    //   throw new Error('Invalid credentials');
    // }

    // Mock user for demonstration
    const user: User = {
      id: 'temp-id',
      name: 'Test User',
      email,
      role: UserRole.USER,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Verify password
    // const isPasswordValid = await bcrypt.compare(password, user.password);
    // if (!isPasswordValid) {
    //   throw new Error('Invalid credentials');
    // }

    // Check if user is active
    if (!user.isActive) {
      throw new Error('Account is deactivated');
    }

    // Generate tokens
    const { accessToken, refreshToken } = this.generateTokens(user);

    return {
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        isActive: user.isActive,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
      accessToken,
      refreshToken,
    };
  }

  public async refreshToken(
    refreshToken: string
  ): Promise<{ accessToken: string }> {
    try {
      // Verify refresh token
      const decoded = jwt.verify(refreshToken, config.JWT_SECRET) as JwtPayload;

      // Find user
      // const user = await this.userRepository.findById(decoded.userId);
      // if (!user || !user.isActive) {
      //   throw new Error('Invalid refresh token');
      // }

      // Generate new access token
      const accessToken = jwt.sign(
        {
          userId: decoded.userId,
          email: decoded.email,
          role: decoded.role,
        },
        config.JWT_SECRET,
        { expiresIn: config.JWT_EXPIRES_IN }
      );

      return { accessToken };
    } catch (error) {
      throw new Error('Invalid refresh token');
    }
  }

  public async forgotPassword(email: string): Promise<void> {
    // Find user by email
    // const user = await this.userRepository.findByEmail(email);
    // if (!user) {
    //   // Don't reveal if user exists or not
    //   return;
    // }

    // Generate reset token
    const resetToken = jwt.sign(
      { email, type: 'password-reset' },
      config.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // Save reset token to database
    // await this.userRepository.updateResetToken(user.id, resetToken);

    // Send email with reset link
    // await this.emailService.sendPasswordResetEmail(email, resetToken);
  }

  public async resetPassword(
    token: string,
    newPassword: string
  ): Promise<void> {
    try {
      // Verify reset token
      const decoded = jwt.verify(token, config.JWT_SECRET) as any;

      if (decoded.type !== 'password-reset') {
        throw new Error('Invalid reset token');
      }

      // Find user by email
      // const user = await this.userRepository.findByEmail(decoded.email);
      // if (!user) {
      //   throw new Error('User not found');
      // }

      // Hash new password
      const saltRounds = config.BCRYPT_ROUNDS;
      const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

      // Update password and clear reset token
      // await this.userRepository.updatePassword(user.id, hashedPassword);
    } catch (error) {
      throw new Error('Invalid or expired reset token');
    }
  }

  private generateTokens(user: User): {
    accessToken: string;
    refreshToken: string;
  } {
    const payload: JwtPayload = {
      userId: user.id,
      email: user.email,
      role: user.role,
    };

    const accessToken = jwt.sign(payload, config.JWT_SECRET, {
      expiresIn: config.JWT_EXPIRES_IN,
    });

    const refreshToken = jwt.sign(payload, config.JWT_SECRET, {
      expiresIn: config.JWT_REFRESH_EXPIRES_IN,
    });

    return { accessToken, refreshToken };
  }
}
